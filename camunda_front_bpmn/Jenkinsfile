pipeline {
    agent any
    
    tools {
        nodejs 'Node20'
    }
    
    environment {
        // Utilisez l'IP de votre machine hôte au lieu de localhost
        SONAR_URL = 'http://host.docker.internal:9000'
        SONAR_CREDS = credentials('sonarqube-auth')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build camunda_front_bpmn') {
            steps {
                dir('camunda_front_bpmn') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }
        
        stage('Lint') {
            steps {
                dir('camunda_front_bpmn') {
                    // Utilisation de || true pour ne pas bloquer le pipeline si le linting échoue
                    sh 'npm run lint || true'
                }
            }
        }
        
        stage('Tests') {
            steps {
                dir('camunda_front_bpmn') {
                    // Utilisation de || true pour ne pas bloquer le pipeline si des tests échouent
                    sh 'npm test || true'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                dir('camunda_front_bpmn') {
                    withCredentials([string(credentialsId: 'sonarqube-auth', variable: 'SONAR_TOKEN')]) {
                        sh '''
                        npm install -g sonarqube-scanner
                        sonar-scanner \\
                        -Dsonar.projectKey=camunda-bpmn-frontend \\
                        -Dsonar.projectName="Camunda BPMN Frontend" \\
                        -Dsonar.host.url=''' + "${SONAR_URL}" + ''' \\
                        -Dsonar.login=${SONAR_TOKEN} \\
                        -Dsonar.sources=src \\
                        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \\
                        -Dsonar.qualitygate.wait=true
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Frontend build and SonarQube analysis completed successfully!'
        }
        failure {
            echo 'Build or SonarQube analysis failed! Check the logs for more information.'
        }
    }
}
