pipeline {
    agent any
    
    environment {
        // Define environment variables
        COMPOSE_PROJECT_NAME = "pfe-se08-frontend"
        // You may need to adjust these paths based on your project structure
        DOCKER_COMPOSE_FILE = "./docker-compose.yml"
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Get code from your version control system
                checkout scm
            }
        }
        
        stage('Create .env File') {
            steps {
                // Create .env file with required variables
                sh '''
                cat > .env << EOL
VITE_API_URL=http://localhost:8890/CAMUNDA-SERVICE
VITE_CRYPTO_SECRET_Key=24DSQFDS5Q3F4DSQF@DSF53DS1QF31D
EOL
                '''
                
                // Optional: Display the created file for verification
                sh "cat .env"
            }
        }
        
        stage('Build Services') {
        steps {
            script {
                try {
                sh "docker compose build --no-cache --progress=plain"
                sh "docker compose up -d"
            } catch (Exception e) {
                // Get container logs if build fails
                sh "docker compose logs --no-color > docker_logs.txt"
                archiveArtifacts artifacts: 'docker_logs.txt'
                error("Build failed: ${e.getMessage()}")
            }
            }
        }
    }
        
        stage('Verify Deployment') {
            steps {
                // Check if the service is running properly
                sh "docker compose -f ${DOCKER_COMPOSE_FILE} ps"
                
                // Wait for application to be ready - adjust sleep time as needed
                sh "sleep 10"
                
                // Optional: Verify that the application is responding
                //sh "curl -s http://localhost:8080/actuator/health || echo 'Health check endpoint not available'"
            }
        }
    }
    
    post {
        success {
            echo 'React application successfully deployed with Docker Compose!'
            echo "Your application should now be running."
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
            
            // Optional: On failure, try to clean up
            // sh "docker compose -f ${DOCKER_COMPOSE_FILE} down || true"
        }
        // cleanup {
        //     // Optional: Clean up unused Docker resources
        //     // sh "docker system prune -f || true"
        // }
    }
}