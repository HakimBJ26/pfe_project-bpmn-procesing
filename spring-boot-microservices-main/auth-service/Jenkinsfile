pipeline {
    agent any
    
    tools {
        maven 'Maven3' // Assurez-vous que ce nom correspond à l'installation Maven configurée dans Jenkins
        jdk 'JDK17'    // Assurez-vous que ce nom correspond à l'installation JDK configurée dans Jenkins
    }
    
    environment {
        DOCKER_REGISTRY = 'localhost:5000' // Remplacez par votre registry
        IMAGE_NAME = 'auth-service'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                dir('spring-boot-microservices-main/auth-service') {
                sh 'mvn clean compile'
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test -Dspring.cloud.config.enabled=false'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Package') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def dockerImage = docker.build("${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("http://${DOCKER_REGISTRY}", '') {
                        def dockerImage = docker.image("${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}")
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }
        
        stage('Update Deployment') {
            steps {
                echo "Deploying ${IMAGE_NAME}:${IMAGE_TAG} to environment"
                // Ici, vous pouveriez avoir une étape pour mettre à jour votre déploiement Kubernetes, etc.
                // Par exemple avec kubectl
                // sh "kubectl set image deployment/${IMAGE_NAME} ${IMAGE_NAME}=${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} -n microservices"
            }
        }
    }
    
    post {
        success {
            echo "Build successful! The ${IMAGE_NAME} service has been built and deployed."
        }
        failure {
            echo "Build failed! Check the logs for more information."
        }
        always {
            // Nettoyage de l'espace de travail
            cleanWs()
        }
    }
}