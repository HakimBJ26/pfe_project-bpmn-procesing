pipeline {
    agent any
    
    tools {
        maven 'Maven3'
        jdk 'JDK17'
    }

    environment {
        SONAR_URL = 'http://localhost:9000'
        SONAR_CREDS = credentials('sonarqube-auth')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Compilation') {
            steps {
                sh 'mvn clean compile -Dspring.cloud.config.enabled=false'
            }
        }
        
        stage('Tests') {
            steps {
                sh 'mvn test -Dspring.cloud.config.enabled=false'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                    mvn sonar:sonar \
                    -Dsonar.projectKey=auth-service \
                    -Dsonar.projectName='Auth Service' \
                    -Dsonar.host.url=${SONAR_URL} \
                    -Dsonar.login=${SONAR_CREDS_USR} \
                    -Dsonar.password=${SONAR_CREDS_PSW} \
                    -Dsonar.java.coveragePlugin=jacoco \
                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                    -Dspring.cloud.config.enabled=false
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo "Build successful! SonarQube analysis completed."
        }
        failure {
            echo "Build failed! Check the logs for more information."
        }
        always {
            cleanWs()
        }
    }
}
