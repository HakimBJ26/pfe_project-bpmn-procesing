pipeline {
    agent {
        docker {
            image 'maven:3.8.4-openjdk-17-slim'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        DOCKER_REGISTRY = 'localhost:5000' 
        IMAGE_NAME      = 'auth-service'
        IMAGE_TAG       = "${BUILD_NUMBER}"
        SONAR_URL       = 'http://sonarqube:9000'
        SONAR_CREDS     = credentials('sonarqube-auth')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                    mvn clean verify sonar:sonar \
                    -Dsonar.projectKey=auth-service \
                    -Dsonar.projectName='Auth Service' \
                    -Dsonar.host.url=${SONAR_URL} \
                    -Dsonar.login=${SONAR_CREDS_USR} \
                    -Dsonar.password=${SONAR_CREDS_PSW} \
                    -Dsonar.java.coveragePlugin=jacoco \
                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                    -Dspring.cloud.config.enabled=false
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    sh 'apt-get update && apt-get install -y docker.io'
                    
                    sh """
                    docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} .
                    docker tag ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    """
                }
            }
        }

        stage('Update Deployment') {
            steps {
                echo "Deploying ${IMAGE_NAME}:${IMAGE_TAG} to environment"
                // sh "kubectl set image deployment/${IMAGE_NAME} ${IMAGE_NAME}=${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} -n microservices"
            }
        }
    }

    post {
        success {
            echo "Build successful! The ${IMAGE_NAME} service has been built and deployed."
        }
        failure {
            echo "Build failed! Check the logs for more information."
        }
        always {
            cleanWs()
        }
    }
}
