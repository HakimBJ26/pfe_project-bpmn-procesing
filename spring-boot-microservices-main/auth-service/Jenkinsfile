pipeline {
    agent {
        docker {
            image 'maven:3.8.4-openjdk-17-slim'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        DOCKER_REGISTRY = 'localhost:5000' 
        IMAGE_NAME      = 'auth-service'
        IMAGE_TAG       = "${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                dir('spring-boot-microservices-main/auth-service') {
                    sh 'mvn clean compile'
                }
            }
        }

        stage('Test') {
            steps {
                dir('spring-boot-microservices-main/auth-service') {
                    sh 'mvn test -Dspring.cloud.config.enabled=false'
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Package') {
            steps {
                dir('spring-boot-microservices-main/auth-service') {
                    sh 'mvn package -DskipTests'
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    // Installation de Docker client dans le conteneur Maven si n√©cessaire
                    sh 'apt-get update && apt-get install -y docker.io'
                    
                    // Construction et push de l'image
                    sh "docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} ."
                    sh "docker tag ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest"
                    sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest"
                }
            }
        }

        stage('Update Deployment') {
            steps {
                echo "Deploying ${IMAGE_NAME}:${IMAGE_TAG} to environment"
                // Par exemple :
                // sh "kubectl set image deployment/${IMAGE_NAME} ${IMAGE_NAME}=${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} -n microservices"
            }
        }
    }

    post {
        success {
            echo "Build successful! The ${IMAGE_NAME} service has been built and deployed."
        }
        failure {
            echo "Build failed! Check the logs for more information."
        }
        always {
            cleanWs()
        }
    }
}
