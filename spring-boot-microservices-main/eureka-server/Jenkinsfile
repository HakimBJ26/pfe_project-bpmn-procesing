pipeline {
    agent any
    
    tools {
        maven 'Maven3'
        jdk 'JDK17'
    }

    environment {
        // Utilisez l'IP de votre machine hôte au lieu de localhost
        SONAR_URL = 'http://host.docker.internal:9000'
        SONAR_CREDS = credentials('sonarqube-auth')
        // Définir un tag pour l'image Docker
        DOCKER_IMAGE_NAME = "eureka-server"
        DOCKER_IMAGE_TAG = "${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USERNAME = 'hakimbenjelloul26'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Vérification Docker') {
            steps {
                sh '''
                echo "=== Vérification de l'installation Docker ==="
                docker version
                docker info
                docker ps
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('spring-boot-microservices-main/eureka-server') {
                    // Création d'un Dockerfile si nécessaire
                    sh '''
                    if [ ! -f Dockerfile ]; then
                        echo "FROM eclipse-temurin:17-jdk-alpine" > Dockerfile
                        echo "VOLUME /tmp" >> Dockerfile
                        echo "COPY target/*.jar app.jar" >> Dockerfile
                        echo "EXPOSE 8761" >> Dockerfile
                        echo "ENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]" >> Dockerfile
                    fi
                    
                    # Construire le package Maven
                    mvn package -DskipTests -Dspring.cloud.config.enabled=false
                    '''
                    
                    // Construction de l'image Docker
                    sh """
                    echo "=== Construction de l'image Docker ==="
                    docker build -t ${DOCKER_IMAGE_TAG} .
                    docker tag ${DOCKER_IMAGE_TAG} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}
                    docker tag ${DOCKER_IMAGE_TAG} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest
                    """
                    
                    // Vérification que l'image a bien été créée
                    sh 'docker images | grep eureka-server'
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                sh """
                echo "=== Push vers Docker Hub ==="
                echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}
                docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest
                docker logout
                """
            }
        }
    }

    post {
        success {
            echo "Build successful! Docker image built and pushed to Docker Hub."
        }
        failure {
            echo "Build failed! Check the logs for more information."
        }
        always {
            // Nettoyage des images Docker créées pendant le build
            sh """
            echo "=== Nettoyage des ressources Docker ==="
            docker rmi ${DOCKER_IMAGE_TAG} || true
            docker rmi ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} || true
            docker rmi ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest || true
            """
            cleanWs()
        }
    }
}