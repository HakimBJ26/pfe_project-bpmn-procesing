pipeline {
    agent any

    tools {
        // à adapter si nécessaire
        jdk 'JDK17'
    }

    environment {
        // nom et tag de l’image
        DOCKER_IMAGE_NAME = "eureka-server"
        DOCKER_IMAGE_TAG  = "${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
        // Docker Hub
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USERNAME    = 'hakimbenjelloul26'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Vérification Docker') {
            steps {
                sh '''
                  echo "=== Vérification de l'installation Docker ==="
                  docker --version
                  docker info
                '''
            }
        }

        stage('Build & Tag Docker Image') {
            steps {
                dir('spring-boot-microservices-main/eureka-server') {
                    // si pas de Dockerfile, on en génère un minimal
                    sh '''
                      if [ ! -f Dockerfile ]; then
                        cat <<EOF > Dockerfile
                        FROM eclipse-temurin:17-jdk-alpine
                        VOLUME /tmp
                        COPY target/*.jar app.jar
                        EXPOSE 8761
                        ENTRYPOINT ["java","-jar","/app.jar"]
                        EOF
                      fi
                    '''
                    // construction et tagging
                    sh """
                      mvn clean package -DskipTests -Dspring.cloud.config.enabled=false
                      docker build -t ${DOCKER_IMAGE_TAG} .
                      docker tag ${DOCKER_IMAGE_TAG} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}
                      docker tag ${DOCKER_IMAGE_TAG} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest
                    """
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh """
                  echo "=== Push vers Docker Hub ==="
                  echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                  docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}
                  docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest
                  docker logout
                """
            }
        }
    }

    post {
        always {
            // nettoyage
            sh "docker rmi ${DOCKER_IMAGE_TAG} || true"
            cleanWs()
        }
        success {
            echo "Push Docker Hub réussi !"
        }
        failure {
            echo "Échec du pipeline."
        }
    }
}
