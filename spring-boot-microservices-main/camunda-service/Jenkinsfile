pipeline {
    agent any
    
    tools {
        maven 'Maven3'
        jdk 'JDK17'
    }

    environment {
        // Utilisez l'IP de votre machine hôte au lieu de localhost
        SONAR_URL = 'http://host.docker.internal:9000'
        SONAR_CREDS = credentials('sonarqube-auth')
        // Définir un tag pour l'image Docker
        DOCKER_IMAGE_TAG = "camunda-service:${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Vérification Docker') {
            steps {
                sh '''
                echo "=== Vérification de l'installation Docker ==="
                docker --version
                docker info
                echo "=== Docker est correctement installé ==="
                '''
            }
        }
        
        stage('Compilation') {
            steps {
                dir('spring-boot-microservices-main/camunda-service') {
                    // Désactivation de la configuration du Config Server et Camunda BPM pour éviter les erreurs
                    sh '''
                    mvn clean compile \
                    -Dspring.cloud.config.enabled=false \
                    -Dspring.flyway.enabled=false \
                    -Dcamunda.bpm.enabled=false
                    '''
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                dir('spring-boot-microservices-main/camunda-service') {
                    sh '''
                    echo "=== Exécution des tests unitaires ==="
                    mvn test \
                      -Dspring.cloud.config.enabled=false \
                      -Dspring.flyway.enabled=false \
                      -Dcamunda.bpm.enabled=false \
                      -Deureka.client.enabled=false \
                      -Dspring.profiles.active=test \
                      -Dtest="*Test,*Tests" \
                      -DfailIfNoTests=false
                    '''
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        
        
        stage('SonarQube Analysis') {
            steps {
                dir('spring-boot-microservices-main/camunda-service') {
                    withCredentials([string(credentialsId: 'sonarqube-auth', variable: 'SONAR_TOKEN')]) {
                        sh '''
                        mvn sonar:sonar \\
                        -DskipTests=true \\
                        -Dsonar.projectKey=camunda-service \\
                        -Dsonar.projectName="Camunda Service" \\
                        -Dsonar.host.url=''' + "${SONAR_URL}" + ''' \\
                        -Dsonar.token=${SONAR_TOKEN} \\
                        -Dsonar.java.coveragePlugin=jacoco \\
                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \\
                        -Dsonar.qualitygate.wait=true \\
                        -Dspring.cloud.config.enabled=false
                        '''
                    }
                }
            }
        }
        
        stage('Package') {
            steps {
                dir('spring-boot-microservices-main/camunda-service') {
                    // Désactiver les tests problématiques lors du packaging
                    sh '''
                    mvn package \
                    -DskipTests \
                    -Dspring.cloud.config.enabled=false \
                    -Dspring.flyway.enabled=false
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('spring-boot-microservices-main/camunda-service') {
                    // Création d'un Dockerfile spécifique pour Camunda avec les configurations nécessaires
                    sh '''
                    if [ ! -f Dockerfile ]; then
                        echo "FROM eclipse-temurin:17-jdk-alpine" > Dockerfile
                        echo "VOLUME /tmp" >> Dockerfile
                        echo "COPY target/*.jar app.jar" >> Dockerfile
                        echo "EXPOSE 8082" >> Dockerfile
                        
                        # Ajout de configurations spécifiques pour éviter les problèmes rencontrés
                        echo "ENV SPRING_CLOUD_CONFIG_ENABLED=false" >> Dockerfile
                        echo "ENV SPRING_FLYWAY_ENABLED=false" >> Dockerfile
                        echo "ENV CAMUNDA_BPM_ENABLED=true" >> Dockerfile
                        
                        echo "ENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]" >> Dockerfile
                    fi
                    '''
                    
                    // Construction de l'image Docker
                    sh "docker build -t ${DOCKER_IMAGE_TAG} ."
                    
                    // Vérification que l'image a bien été créée
                    sh 'docker images | grep camunda-service'
                }
            }
        }
        
        stage('Test Docker Container') {
            steps {
                dir('spring-boot-microservices-main/camunda-service') {
                    // Lancer un conteneur à partir de l'image et vérifier qu'il démarre correctement
                    sh """
                    echo "=== Test du conteneur Docker ==="
                    # Lancer le conteneur en mode détaché avec un nom unique et exposer le port du service
                    docker run -d -p 8082:8082 \
                      -e SPRING_CLOUD_CONFIG_ENABLED=false \
                      -e SPRING_FLYWAY_ENABLED=false \
                      -e CAMUNDA_BPM_ENABLED=true \
                      -e EUREKA_CLIENT_ENABLED=false \
                      --name camunda-service-test-${BUILD_NUMBER} ${DOCKER_IMAGE_TAG}
                    
                    # Vérifier que le conteneur est en cours d'exécution
                    docker ps | grep camunda-service-test-${BUILD_NUMBER}
                    
                    # Attendre quelques secondes pour que le conteneur démarre
                    sleep 30
                    
                    # Vérifier les logs du conteneur
                    docker logs camunda-service-test-${BUILD_NUMBER}
                    
                    # Arrêter et supprimer le conteneur de test
                    docker stop camunda-service-test-${BUILD_NUMBER}
                    docker rm camunda-service-test-${BUILD_NUMBER}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Build successful! SonarQube analysis completed and Docker image built."
        }
        failure {
            echo "Build failed! Check the logs for more information."
        }
        always {
            // Nettoyage des images Docker créées pendant le build
            sh """
            echo "=== Nettoyage des ressources Docker ==="
            docker rmi ${DOCKER_IMAGE_TAG} || true
            """
            cleanWs()
        }
    }
}
